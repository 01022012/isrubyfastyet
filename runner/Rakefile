require 'tempfile'
require 'benchmark'
require 'rubygems'
require 'fan'

begin
  require 'artii'
rescue LoadError
end

# turn the config file into an array of hashes
def rubies
  rows = File.read(File.join(File.dirname(__FILE__), 'rubies')).lines.map(&:chomp).select { |line| line !~ /^\s*#/ }.map { |line| line.split(/\s\s+/) }

  headers = rows.shift

  rows.map do |row|
    {}.tap do |hash|
      row.each_with_index do |cell, i|
        hash.merge!(headers[i] => cell)
      end
    end
  end
end

def run_with_output(command)
  note = "Running: #{command}"
  puts "=" * note.size
  puts note
  puts "=" * note.size

  Process.wait( fork { exec command } )
  $?.success? # return whether command succeeded or not
end

def relative_path(path)
  File.join(File.dirname(__FILE__), path)
end

def script_path(script)
  relative_path("scripts/#{script}")
end

def puts_title(str)
  if defined?(Artii)
    # pretty ascii art
    puts Artii::Base.new(str).output
  else
    puts
    puts str.chars.to_a.join(" ")
    puts
  end
end

def ruby_install_succeeded?(rvm_name)
  failed_install_rubies = File.read(relative_path("failed_install_rubies")).lines.to_a.map(&:chomp)
  !failed_install_rubies.include?(rvm_name)
end

def benchmark_file_paths
  Dir.glob(relative_path('benchmarks/*/*benchmark.rb'))
end

def benchmark_folder_paths
  benchmark_file_paths.map { |path| File.dirname(path) }.uniq
end


task :default => :benchmark_suite

desc "Install or update each of the ruby implimentations in the runner/rubies file. Head rubies are always re-installed. Others are re-installed if their RVM definition has changed."
task :update_rubies do

  failed_install_rubies = File.open(relative_path("failed_install_rubies"), "w")

  rubies.each do |ruby|

    puts_title(ruby['Nice Name'])

    # update the Ruby
    # fail if install takes longer than 45 minutes
    ruby_install_succeeded = run_with_output "#{script_path 'timeout3'} -t #{45*60} -i 30 -d 30 #{script_path 'setup_ruby'} #{ruby['RVM Name']}"

    failed_install_rubies.puts(ruby['RVM Name']) if !ruby_install_succeeded
  end

  failed_install_rubies.close
end

desc "Ensure a Gemfile.lock for each ruby implimentation and benchmark folder."
task :setup_gemfile_locks do
  rubies.each do |ruby|
    if ruby_install_succeeded?(ruby['RVM Name'])
      benchmark_folder_paths.each do |benchmark_folder_path|
        run_with_output "#{script_path 'setup_bundle'} #{benchmark_folder_path} #{ruby['RVM Name']}"
      end
    end
  end
end

task :benchmark_suite do
  p rubies

  # get the fans going
  Fan.maximize_all!
  at_exit { Fan.return_all_to_normal! }

  result_tempfile = Tempfile.new("benchmark_result")

  rubies.each do |ruby|

    ruby_duration = Benchmark.realtime do

      puts_title(ruby['Nice Name'])

      ruby_install_succeeded = false

      ruby_install_duration = Benchmark.realtime do
        # update the Ruby
        # fail if install takes longer than 45 minutes
        ruby_install_succeeded = run_with_output "#{script_path 'timeout3'} -t #{45*60} -i 30 -d 30 #{script_path 'setup_ruby'} #{ruby['RVM Name']}"
      end

      puts "Done installing #{ruby['RVM Name']}. Took %.1f minutes" % [ruby_install_duration / 60]

      # set up Gemfile.lock's
      if ruby_install_succeeded
        benchmark_folder_paths.each do |benchmark_folder_path|
          run_with_output "#{script_path 'setup_bundle'} #{benchmark_folder_path} #{ruby['RVM Name']}"
        end
      end

      # run benchmarks
      benchmark_file_paths.each do |benchmark_file_path|

        benchmark_file_path =~ /benchmarks\/([^\/]+)\/([^\/]*)benchmark\.rb/
        benchmark_suite_name = $1
        benchmark_script_name = ($2 == '' ? nil : $2.chop)
        benchmark_full_name = [benchmark_suite_name, benchmark_script_name].compact.join('_')

        benchmark_duration = Benchmark.realtime do

          if ruby_install_succeeded
            run_with_output "#{script_path 'run_benchmark'} #{File.dirname(benchmark_file_path)} #{ruby['RVM Name']} '#{ruby['Command']}' #{benchmark_file_path} #{result_tempfile.path}"

            result_tempfile.rewind
            result = result_tempfile.read.chomp

            full_version_string = `#{script_path 'ruby_version_in_rvm'} #{ruby['RVM Name']} #{ruby['Command']}`.lines.to_a.last.strip
          else
            result = "failed to install #{ruby['RVM Name']}"
            full_version_string = result
          end

          File.open(relative_path("../results/#{benchmark_full_name}_results.tsv"), 'a') do |results_file|
            results_file.puts [Time.now.utc.strftime("%F %T UTC"), ruby['RVM Name'], result, full_version_string].join("\t")
          end

          puts result

        end

        puts "Done with #{benchmark_full_name.gsub('_',' ')} for #{ruby['RVM Name']}. Took %.1f minutes" % [benchmark_duration / 60]

      end

    end

    puts
    puts "Done with #{ruby['Nice Name']}. Took %.1f minutes" % [ruby_duration / 60]
    puts

  end
end